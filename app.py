import streamlit as st
import os, json
from utils.note_manager import load_notes, save_note, delete_note
from utils.question_generator import generate_questions
from config import QUESTIONS_DIR

# Application principale

# Sidebar 
st.sidebar.title("üìù **NoteMaster**")
st.sidebar.markdown("<h3>Navigation rapide</h3>", unsafe_allow_html=True)
menu = st.sidebar.radio(
    "üìÇ <span style='color: #0066CC;'>Choisissez une option :</span>", 
    ["Dashboard", "Prise de Notes", "Mode Quiz", "API", "Docs"], 
    format_func=lambda x: f"üîπ {x}", 
    index=0,
    label_visibility="hidden", 
    key="menu_radio"
)

# Main content
if menu == "Dashboard":
    # Header with custom styles
    st.markdown("<h1>Bienvenue sur NoteMaster ‚ö°Ô∏è</h1>", unsafe_allow_html=True)
    st.markdown("---")
    st.subheader("Apprendre ses cours gr√¢ce au _Active Learning_!")

    # Feature list with emojis and custom formatting
    st.markdown(
        """
        <div style='padding: 10px;'>
            <p><strong>NoteMaster</strong> vous permet de :</p>
            <ul>
                <li>üóíÔ∏è <strong>Prendre des notes</strong> et les organiser.</li>
                <li>‚ùì <strong>G√©n√©rer des questions</strong> pour vos cours.</li>
                <li>‚úÖ <strong>Pratiquer l'apprentissage actif</strong> et suivre vos progr√®s.</li>
            </ul>
        </div>
        """, 
        unsafe_allow_html=True
    )


elif menu == "Prise de Notes":
    st.header("Prise de Notes")
    
    if "notes" not in st.session_state:
        st.session_state.notes = load_notes()

    if "refresh" not in st.session_state:
        st.session_state.refresh = False

    st.write("### Vos notes :")
    if st.session_state.notes:
        for note in st.session_state.notes:
            st.write(f"- {note['title']}")
    else:
        st.write("Aucune note disponible pour le moment.")

    # Add a new note
    st.subheader("Cr√©er une nouvelle note")
    note_title = st.text_input("Titre de la note")
    note_content = st.text_area("Contenu de la note", height=330)
    if st.button("Sauvegarder"):
        if note_title and note_content:
            save_note(note_title, note_content)
            st.session_state.notes = load_notes()
            st.success(f"Note '{note_title}' sauvegard√©e avec succ√®s !")
        else:
            st.warning("Veuillez fournir un titre et un contenu pour votre note.")

    # Delete a note
    st.subheader("Supprimer une note")
    if st.session_state.notes:
        note_titles = [note["title"] for note in st.session_state.notes]
        note_to_delete = st.selectbox("S√©lectionnez une note √† supprimer", note_titles, key="delete_note_select")
        if st.button("Supprimer"):
            delete_note(note_to_delete)
            st.session_state.notes = load_notes()
            st.session_state.refresh = not st.session_state.refresh  
            st.success(f"Note '{note_to_delete}' supprim√©e avec succ√®s !")
    else:
        st.warning("Aucune note disponible √† supprimer.")



elif menu == "Mode Quiz":
    st.header("Mode Quiz")
    
    # Charger les notes disponibles
    notes = load_notes()
    note_titles = [note["title"] for note in notes]
    selected_note = st.selectbox("Choisissez une note", note_titles)

    if selected_note:
        note_content = next(note["content"] for note in notes if note["title"] == selected_note)
        json_file_path = os.path.join(QUESTIONS_DIR, f"{selected_note}.json")
        
        # Fonction pour charger les questions et les stocker dans session_state
        def load_questions():
            if os.path.exists(json_file_path):
                with open(json_file_path, "r") as file:
                    return json.load(file)
            return []

        # Initialisation des questions si pas encore charg√©es
        if "questions" not in st.session_state or st.session_state.get("current_note") != selected_note:
            st.session_state.questions = load_questions()
            st.session_state.current_note = selected_note  # Stocker la note s√©lectionn√©e

        # G√©n√©rer de nouvelles questions
        if st.button("G√©n√©rer des questions"):
            try:
                with st.spinner("G√©n√©ration des questions en cours..."):
                    new_questions = generate_questions(selected_note, note_content)
                
                if new_questions:
                    with open(json_file_path, "w") as file:
                        json.dump(new_questions, file, indent=4, ensure_ascii=False)
                    
                    st.session_state.questions = new_questions  # Met √† jour en session_state
                    st.success("Questions g√©n√©r√©es et sauvegard√©es avec succ√®s !")
                else:
                    st.error("L'API n'a retourn√© aucune question. Veuillez v√©rifier le contenu des notes ou l'API.")
            except Exception as e:
                st.error(f"Une erreur s'est produite : {e}")

        # Afficher les questions
        if st.session_state.questions:
            st.write("### Questions :")
            for i, question in enumerate(st.session_state.questions, 1):
                with st.expander(f"Question {i}: {question['text']}"):
                    user_answer = st.text_input(f"Votre r√©ponse pour la question {i}", key=f"answer_{i}")
                    if st.button(f"V√©rifier la r√©ponse {i}", key=f"check_{i}"):
                        st.write(f"**R√©ponse correcte :** {question['reponse']}")

            # Bouton pour supprimer les questions existantes
            if st.button("üóëÔ∏è Supprimer toutes les questions"):
                try:
                    os.remove(json_file_path)  # Supprime le fichier JSON
                    st.session_state.questions = []  # Met √† jour imm√©diatement
                    st.success("Les questions ont √©t√© supprim√©es avec succ√®s !")
                except Exception as e:
                    st.error(f"Erreur lors de la suppression : {e}")
        
        else:
            st.info("Aucune question disponible. Cliquez sur 'G√©n√©rer des questions' pour commencer.")


elif menu == "API":
    st.header("Configuration de l'API")

    # Charger la cl√© API existante (si elle existe)
    if "api_key" not in st.session_state:
        from dotenv import load_dotenv
        load_dotenv()
        st.session_state.api_key = os.getenv("DEEPSEEK_KEY", "")

    # Formulaire pour entrer ou mettre √† jour la cl√© API
    st.write("Entrez votre cl√© API de OpenRouter pour activer les fonctionnalit√©s de g√©n√©ration.")
    api_key_input = st.text_input(
        "Cl√© API",
        value=st.session_state.api_key,
        placeholder="Entrez votre cl√© API",
        type="password",
        key="api_input"
    )

    # Boutons pour enregistrer ou r√©initialiser
    col1, col2 = st.columns(2)

    with col1:
        if st.button("Enregistrer la cl√© API"):
            if len(api_key_input) == 73:
                with open(".env", "w") as file:
                    file.write(f'DEEPSEEK_KEY="{api_key_input}"')
                st.session_state.api_key = api_key_input
                st.success("Cl√© API enregistr√©e avec succ√®s !")
            else:
                st.error("Cl√© API invalide. Elle doit comporter exactement 73 caract√®res.")

    with col2:
        if st.button("R√©initialiser la cl√© API"):
            if os.path.exists(".env"):
                os.remove(".env")
            st.session_state.api_key = ""
            st.warning("Cl√© API r√©initialis√©e. Veuillez en entrer une nouvelle.")


elif menu == "Docs":
    st.header("üìñ Docs")

    # Bouton vers le d√©p√¥t GitHub
    st.subheader("Acc√©der au R√©po GitHub")
    st.write("Vous pouvez acc√©der au code source et aux d√©tails du projet sur le r√©po GitHub.")
    st.link_button("üëâ Aller au d√©p√¥t GitHub", url="https://github.com/mamour-dx/NoteMaster")

    # Documentation sur la gestion de l'API DeepSeek via OpenRouter
    st.subheader("Configurer l'API DeepSeek V3 via OpenRouter")
    st.markdown(
        """
        Pour utiliser l'API DeepSeek dans cette application, vous devez g√©n√©rer une cl√© API OpenRouter et la configurer. Deux options sont disponibles :

        ### 1Ô∏è‚É£ Obtenir une cl√© API OpenRouter
        - Rendez-vous sur [OpenRouter](https://openrouter.ai) et cr√©ez un compte.
        - G√©n√©rez une cl√© API gratuite pour le model DeepSeek V3.

        ### 2Ô∏è‚É£ Ajouter votre cl√© API √† l'application

        **Option 1 : via un fichier `.env` (manuel)**
        - Cr√©ez un fichier `.env` √† la racine du projet.
        - Ajoutez-y la ligne suivante en rempla√ßant `VOTRE_CLE_API` par votre cl√© API :
          ```
          DEEPSEEK_KEY=VOTRE_CLE_API
          ```
        - Red√©marrez l'application pour que les modifications soient prises en compte :
          ```bash
          streamlit run app.py
          ```

        **Option 2 : directement via l'application (automatique)**
        - Acc√©dez √† l'onglet **API** dans le menu lat√©ral de l'application.
        - Entrez votre cl√© API dans le champ pr√©vu et cliquez sur **Enregistrer**.
        - L'application enregistrera automatiquement la cl√© pour une utilisation imm√©diate.

        ### üí° R√©solution des probl√®mes
        Si vous rencontrez des probl√®mes avec l'API :
        - V√©rifiez que votre cl√© API est correcte et valide.
        - Assurez-vous que vous avez bien install√© les d√©pendances n√©cessaires (`pip install openai`).
        - Consultez la documentation d'OpenRouter ici : [Documentation OpenRouter](https://openrouter.ai/docs).

        ### üöÄ Besoin d'aide ou d'une nouvelle fonctionnalit√© ?
        Si vous avez un probl√®me ou souhaitez sugg√©rer une am√©lioration, ouvrez un **issue** sur GitHub :
        üëâ [Ouvrir un issue](https://github.com/mamour-dx/NoteMaster/issues)
        """
    )
    
    # Ajout d'un espace pour d'autres param√®tres futurs
    st.subheader("Autres param√®tres")
    st.write("Des options suppl√©mentaires seront ajout√©es ici √† l'avenir.")




# Divider
st.markdown("---")


st.markdown("### üåü Ressources utiles :")
# Align the buttons horizontally
col1, col2 = st.columns(2)
with col1:
    st.link_button("üìÑ R√©po Github", url="https://github.com/mamour-dx/NoteMaster")
with col2:
    st.link_button("üìö Vid√©o YouTube", url="https://youtube.com/@mxr_codes")